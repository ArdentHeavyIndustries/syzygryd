/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

SwitcherSvc = {};
SwitcherSvc.base = "/";
SwitcherSvc.actionBase = SwitcherSvc.base + "sz/";

reloadEnabled = true;

//
// Function: load()
// Called by HTML body element's onload event when the web application is ready to start
//
function load()
{
    dashcode.setupParts();
    window.setInterval(function() {
        reloadSetInfo();
    }, 1000);
}

//
// Function: itemClicked()
// Called when an item from the items list is selected to navigate to the detail view
//
function itemClicked(event)
{
    var list = document.getElementById("setlist").object;
    var browser = document.getElementById('browser').object;
    var selectedObjects = list.selectedObjects();
    
    if (selectedObjects && (1 == selectedObjects.length)){
        // The Browser's goForward method is used to make the browser push down to a new level.
        // Going back to previous levels is handled automatically.
        browser.goForward(document.getElementById('detailLevel'), "Set");
    }    
    
    reloadEnabled = false;
    
    window.setInterval(function() {
        reloadEnabled = true
    }, 5000);
}

function doSwitcherAction(event)
{
    
    var action,fromList;
    
    var list = document.getElementById("maintlist").object;
    var selectedObjects = list.selectedObjects();
    
    var statusIndicator = document.getElementById("maintactivity");
    var statusIndicatorObj = statusIndicator.object;
    statusIndicator.style.visibility = "visible";
    statusIndicatorObj.startAnimation();
    
    var stopStatus = function() {
        statusIndicator.style.visibility = "hidden";
        statusIndicatorObj.stopAnimation();
        list.setSelectionIndexes();
    }
    
    var onloadhandler = function() {
        reloadSetInfo();
    }
    
    // first try action list
    if (selectedObjects && (selectedObjects.length == 1)) {
        action = selectedObjects[0][1];
        fromList = true;
    } else if (event 
        && event.toElement 
        && event.toElement.parentNode 
        && event.toElement.parentNode.id) {
        if (confirm("End current set now?")) {
            action = event.toElement.parentNode.id;
        } else {
	    return;
	}
    }

    if (action == "livespace") {
	if (!confirm("Are you sure you want to send a space to Live?  This will stop playing if it is started, which may cause the switcher to kill Live.")) {
	    return;
	}
    } else if (action == "liveesc") {
	if (!confirm("Are you sure you want to send ESC to Live?  Do you know what it does?  I don't.")) {
	    return;
	}
    } else if (action == "loadtimeout") {
	if (!confirm("Are you sure you want to skip the load timeout?  It's okay if the set is really loaded.  But if not, this might cause the switcher to kill Live.")) {
	    return;
	}
    } else if (action == "livequit") {
	if (!confirm("Are you sure you want to quit Live?  The switcher ought to restart it.")){
	    return;
	}
    }
    // screenshots don't require confirmation
    
    var actionURL = SwitcherSvc.actionBase + action;
    
    if (action.indexOf('screenshot') > -1) {
        window.open(actionURL, 'screenshot');
    } else {
        var xmlRequest = new XMLHttpRequest();
        xmlRequest.open("GET", actionURL);
        xmlRequest.onload = onloadhandler;
        xmlRequest.setRequestHeader("Cache-Control", "no-cache");
        xmlRequest.send(null);
    }
    
    window.setTimeout(function() { stopStatus() }, 1500); 
    window.setTimeout(function() { reloadSetInfo() }, 1500); 
    window.setTimeout(function() { reloadSetInfo() }, 3000); 
    window.setTimeout(function() { reloadSetInfo() }, 4500);

}

function playOrQueueSet(event)
{
    var actionURL = SwitcherSvc.actionBase + "playthis?setid=";
    
    var list = document.getElementById("setlist").object;
    var selectedObjects = list.selectedObjects();
    var id = list.selectedIndex;
    var queue = false;
    
    if (event 
        && event.toElement 
        && event.toElement.parentNode 
        && event.toElement.parentNode.id
        && event.toElement.parentNode.id.indexOf("queue") > -1) {
        queue = true;
    } else {
	if (confirm("End current set now?")) {
	    queue = false;
	} else {
	    return;
	}
    }
    
    actionURL += id + "&q=" + (queue ? "1" : "0");
      
    var xmlRequest = new XMLHttpRequest();
    xmlRequest.open("GET", actionURL);
    xmlRequest.setRequestHeader("Cache-Control", "no-cache");
    xmlRequest.send(null);
    
    reloadEnabled = true;
    reloadSetInfo();
    
    var browser = document.getElementById('browser').object;
    browser.goBack();  
}

function reloadSetInfo() {
    if (reloadEnabled) {
        var qData = dashcode.getDataSource("actionqueue");
        
        qData.performQuery();
    
        var ql = document.getElementById("setlist").object;
        ql.reloadData();
    
        var sn = document.getElementById("setname").object;
        sn.updateBindings();
    }
}
